)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
shinythemes::selecttheme(),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
shinythemes::themeSelector(),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
theme <- shinythemes::shinytheme('paper'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
theme = shinythemes::shinytheme('paper'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
setwd("/Users/oubielamir/Documents/github/Covid19-US-Leaflet")
library(shiny)
library(leaflet)
library(leaflet.providers)
library(readr)
library(dplyr)
covid <- read_csv("07-05-2020.csv")
covid <- covid %>% rename(lng  = Long_, lat = Lat) %>%
mutate(severe = ifelse(covid$Confirmed >= 100000, TRUE, FALSE),
circlesize = ifelse(covid$Confirmed <= 10000, 10,
ifelse(covid$Confirmed <= 30000, 15,
ifelse(covid$Confirmed <= 50000, 20,30
))))
binpal <- colorBin(c("blue", "purple", "orange", "red"), covid$Confirmed, bins = 4, pretty = F, reverse = F)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize )
m
})
}
shinyApp(ui, server)
?addCircleMarkers
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize, labelOptions = (interactive =T, textsize = "20px") )
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize, labelOptions = (interactive =T, textsize = "50px") )
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize, labelOptions = (textsize = "50px") )
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize, labelOptions = (textsize = "1000px") )
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = (~paste((Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed)), textsize = "1000px"),
radius = ~circlesize, labelOptions = (textsize = "1000px") )
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize, labelOptions = (textsize = "50px") )
m
})
}
shinyApp(ui, server)
View(covid)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(People_Hospitalized), "Hospitalized", as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize, labelOptions = (textsize = "50px") )
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, "/n", (as.character(Confirmed)), 'cases, ',
as.character(People_Hospitalized), "Hospitalized", as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize, labelOptions = (textsize = "50px") )
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, "\n", (as.character(Confirmed)), 'cases, ',
as.character(People_Hospitalized), "Hospitalized", as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize, labelOptions = (textsize = "50px") )
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, ":",  sep = "\n", (as.character(Confirmed)), 'cases, ',
as.character(People_Hospitalized), "Hospitalized", as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize, labelOptions = (textsize = "50px") )
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, ":",  sep = "\n", (as.character(Confirmed)), 'cases, ',
as.character(People_Hospitalized), "Hospitalized, and", as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize, labelOptions = (textsize = "50px") )
m
})
}
shinyApp(ui, server)
