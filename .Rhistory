library(dplyr)
dir()
2^2
install.packages("shiny")
library(ggplot2)
library(dplyr)
install.packages("babynames")
library(babynames)
data("babynames")
force(babynames)
j <- babynames %>% filter(name == David)
j <- babynames %>% filter(name == "David")
View(j)
j <- babynames %>% filter(name == "David")
View(j)
library(shiny)
install.packages("shiny")
library(shiny)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(ggplot2)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(babynames)
subset(babynames, name == "David")
ui <- fluidPage(
titlePanel("Baby Name Explorer"),
sidebarLayout(
sidebarPanel(textInput('name', 'Enter Name')),
mainPanel(plotOutput('trend'))
)
)
server <- function(input, output, session) {
output$trend <- renderPlot({
# CODE BELOW: Update to display a line plot of the input name
data_name <- subset(babynames, name == input$name)
ggplot(data_name, aes(year, prop, color = sex)) + geom_line()
})
}
shinyApp(ui = ui, server = server)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/github/r-shiny-Babynames-Explorer/baby_names.R')
output$trend <- renderPlot({
data_name <- subset(babynames, name == input$name)
ggplot(data_name, aes(year, prop, color = sex)) + geom_line()
})
runApp('Documents/github/r-shiny-Babynames-Explorer/baby_names.R')
library(shiny); runApp('Documents/github/r-shiny-Babynames-Explorer/baby_names.R')
install.packages("plotly")
library(shiny)
library(ggplot2)
library(dplyr)
library(babynames)
library(plotly)
install.packages("plotly")
library(plotly)
install.packages("plotly")
library(plotly)
install.packages("DT")
library(DT)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel(plotlyOutput('plot_names')),
tabPanel(DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot, aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel(plotlyOutput('plot_names')),
tabPanel(DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot, aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel(plotlyOutput('plot_names')),
tabPanel(DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp('Documents/github/r-Shiny-Babynames-Explorer-Interactive-plot/babynames_plotly.R')
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
install.packages("shinythemes")
library(shinythemes)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
theme = shinythemes::shinytheme('flatly'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
theme = shinythemes::shinytheme('superhero'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
theme = shinythemes::selecttheme(),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
shinythemes::selecttheme(),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
shinythemes::themeSelector(),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
theme <- shinythemes::shinytheme('paper'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
theme = shinythemes::shinytheme('paper'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
setwd(/Users/oubielamir/Documents/github)
setwd("/Users/oubielamir/Documents/github")
getwd()
setwd("/Users/oubielamir/Documents/github/Covid19-US-Leaflet")
getwd()
install.packages("tidyverse")
library(shiny)
library(leaflet)
library(leaflet.providers)
library(readr)
library(tidyverse)
library(readr)
remove.packages("readr")
install.packages("readr")
library(readr)
covid <- read_csv("04-28-2020.csv")
library(tidyverse)
library(readr)
remove.packages("readr")
covid <- read_csv("04-28-2020.csv")
install.packages("readr")
library(readr)
remove.packages("readr")
install.packages("tidyverse")
library(shiny)
library(leaflet)
library(leaflet.providers)
library(readr)
covid <- read_csv("04-28-2020.csv")
covid <- covid %>% rename(lng  = Long_, lat = Lat)
library(tidyverse)
covid <- covid %>% rename(lng  = Long_, lat = Lat)
View(covid)
ui <- bootstrapPage(
leafletOutput('map', width = "200%", height = 1000)
)
server <- function(input, output, session){
output$map <-  renderLeaflet({
covid %>%
#%>% filter(Deaths <= 100)
leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#fitBounds(~min(covid$Lat), ~min(covid$Long_), ~max(covid$Lat), ~max(covid$Long_)) %>%
setView(-98.58, 39.82, zoom = 1) %>% addCircleMarkers(radius = ~(Confirmed/1000), weight = 1,
popup = paste(covid$Province_State, '\n', (as.character(covid$Confirmed)), 'cases'))
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
leafletOutput('map', width = "200%", height = 1000) ,
absolutePanel(top =10, right = 10, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 3000)
)
)
server <- function(input, output, session){
output$map <-  renderLeaflet({
covid %>%
#%>% filter(Deaths <= 100)
leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#fitBounds(~min(covid$Lat), ~min(covid$Long_), ~max(covid$Lat), ~max(covid$Long_)) %>%
setView(-98.58, 39.82, zoom = 1) %>% addCircleMarkers(radius = ~(Confirmed/1000), weight = 1,
popup = paste(covid$Province_State, '\n', (as.character(covid$Confirmed)), 'cases'))
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
leafletOutput('map', width = "200%", height = 1000) ,
absolutePanel(top =10, right = 9, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 3000)
)
)
server <- function(input, output, session){
output$map <-  renderLeaflet({
covid %>%
#%>% filter(Deaths <= 100)
leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#fitBounds(~min(covid$Lat), ~min(covid$Long_), ~max(covid$Lat), ~max(covid$Long_)) %>%
setView(-98.58, 39.82, zoom = 1) %>% addCircleMarkers(radius = ~(Confirmed/1000), weight = 1,
popup = paste(covid$Province_State, '\n', (as.character(covid$Confirmed)), 'cases'))
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
leafletOutput('map', width = "200%", height = 1000) ,
absolutePanel(top =10, right = 3, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 3000)
)
)
server <- function(input, output, session){
output$map <-  renderLeaflet({
covid %>%
#%>% filter(Deaths <= 100)
leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#fitBounds(~min(covid$Lat), ~min(covid$Long_), ~max(covid$Lat), ~max(covid$Long_)) %>%
setView(-98.58, 39.82, zoom = 1) %>% addCircleMarkers(radius = ~(Confirmed/1000), weight = 1,
popup = paste(covid$Province_State, '\n', (as.character(covid$Confirmed)), 'cases'))
})
}
shinyApp(ui, server)
?absolutePanel
ui <- bootstrapPage(
leafletOutput('map', width = "200%", height = 1000) ,
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 3000)
)
)
server <- function(input, output, session){
output$map <-  renderLeaflet({
covid %>%
#%>% filter(Deaths <= 100)
leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#fitBounds(~min(covid$Lat), ~min(covid$Long_), ~max(covid$Lat), ~max(covid$Long_)) %>%
setView(-98.58, 39.82, zoom = 1) %>% addCircleMarkers(radius = ~(Confirmed/1000), weight = 1,
popup = paste(covid$Province_State, '\n', (as.character(covid$Confirmed)), 'cases'))
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
leafletOutput('map', width = "200%", height = 1000) ,
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 3000)
)
)
server <- function(input, output, session){
output$map <-  renderLeaflet({
covid %>% filter(Confirmed <= input$cases) %>%
#%>% filter(Deaths <= 100)
leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#fitBounds(~min(covid$Lat), ~min(covid$Long_), ~max(covid$Lat), ~max(covid$Long_)) %>%
setView(-98.58, 39.82, zoom = 1) %>% addCircleMarkers(radius = ~(Confirmed/1000), weight = 1,
popup = paste(covid$Province_State, '\n', (as.character(covid$Confirmed)), 'cases'))
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
leafletOutput('map', width = "200%", height = 1000) ,
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 3000)
)
)
server <- function(input, output, session){
output$map <-  renderLeaflet({
covid %>% filter(Confirmed <= input$cases) %>%
#%>% filter(Deaths <= 100)
leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#fitBounds(~min(covid$Lat), ~min(covid$Long_), ~max(covid$Lat), ~max(covid$Long_)) %>%
setView(-98.58, 39.82, zoom = 1) %>% addCircleMarkers( weight = 1,
popup = paste(covid$Province_State, '\n', (as.character(covid$Confirmed)), 'cases'))
})
}
shinyApp(ui, server)
