server <- function(input, output, session){
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#taking input from user
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize ) %>%
addLegend("topright", pal = binpal, values = covid$Confirmed, title = "Confirmed Cases", opacity = 1)
m
})
}
shinyApp(ui, server)
?addLegend
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#taking input from user
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize ) %>%
addLegend(position = "topright", pal = binpal, values = covid$Confirmed, title = "Confirmed Cases", opacity = 1)
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#taking input from user
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize ) %>%
addLegend(position = "bottomright", pal = binpal, values = covid$Confirmed, title = "Confirmed Cases", opacity = 1)
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#taking input from user
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize ) %>%
addLegend(position = "bottomright", pal = binpal, values = covid$Confirmed, title = "Confirmed Cases", opacity = 1)
m
})
}
shinyApp(ui, server)
covid <- read_csv("06-28-2020.csv")
covid <- covid %>% rename(lng  = Long_, lat = Lat) %>% mutate(severe = ifelse(covid$Confirmed >= 100000, TRUE, FALSE),
circlesize = ifelse(covid$Confirmed <= 10000, 10,
ifelse(covid$Confirmed <= 30000, 15,
ifelse(covid$Confirmed <= 50000, 20,30
))))
binpal <- colorBin(c("blue", "purple", "orange", "red"), covid$Confirmed, bins = 4, pretty = F, reverse = F)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#taking input from user
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize ) %>%
addLegend(position = "bottomright", pal = binpal, values = covid$Confirmed, title = "Confirmed Cases", opacity = 1)
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize )
m
})
}
shinyApp(ui, server)
?leafletProxy
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observeEvent({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize )
m
})
}
shinyApp(ui, server)
?observeEvent
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize )
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize )
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$MtbMap) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize )
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$MtbMap)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize )
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$MtbMap)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize )
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$MtbMap)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$MtbMap) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize )
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$MtbMap)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$MtbMap) %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize )
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$MtbMap) %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles(providers$Stamen.TonerLabels)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$MtbMap) %>%
addProviderTiles(providers$Stamen.TonerLines,
options = providerTileOptions(opacity = 0.35)) %>%
addProviderTiles(providers$Stamen.TonerLabels) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize )
m
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
#Filter data
data <- reactive({
covid %>% filter(Confirmed <= input$cases)
})
observe({
df = data()
leafletProxy("map", data = df) %>%
addProviderTiles(providers$Stamen.Toner)
})
output$map <-  renderLeaflet({
#adding tiles
m <- data() %>% leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>%
addCircleMarkers(weight = ~(Deaths/1000),
label = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~binpal(covid$Confirmed),
radius = ~circlesize )
m
})
}
shinyApp(ui, server)
