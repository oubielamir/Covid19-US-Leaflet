source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("glmnet")
View(tmp)
View(tmp)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("glmnet")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("glmnet")
source('~/.active-rstudio-document', echo=TRUE)
View(tmp)
View(tmp)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("glmnet")
View(tmp)
LungCapData <- read.delim("~/Downloads/LungCapData.txt")
View(LungCapData)
model1<-lm(LungCap~Age+Height)
View(LungCapData)
attach(LungCapData)
names(LungCapData)
class(Age)
class(Smoke)
levels(Smoke)
model1<-lm(LungCap~Age+Height)
summary(model1)
cor(Age,Height,method="pearson")
confint(model1,conf.level=0.95)
model2<-lm(LungCap~Age+Height+Smoke+Gender+Caesarean)
summary(model2)
plot(model2)
plot(model1)
train_ind <- sample(seq_len(nrow(LungCapData)), size = smp_size)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(test)
summary(train)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
View(Lu)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
prediction
summary(prediction)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
summary(prediction)
head(prediction)
prediction
summary(model1)
summary(train)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/RHW1.R', echo=TRUE)
source('~/Documents/RHW1.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
source('~/Documents/499Proj2.R', echo=TRUE)
cor(Age,Smoke,method="pearson")
prediction
predict(model1, newdata=test)
mean(Age)
mean(Smoke)
mean(Height)
source('~/Documents/499Proj2.R', echo=TRUE)
predict(model,newdata,type="response")
predict(model1,newdata,type="response")
newdata=LungCapData.frame(Age=12, Height=64.83628)
newdata=data.frame(Age=12, Height=64.83628)
predict(model1,newdata,type="response")
predict(model,newdata,type="response")
packages()
installed.packages()
library(data.table)
library(dplyr)
dir()
2^2
install.packages("shiny")
library(ggplot2)
library(dplyr)
install.packages("babynames")
library(babynames)
data("babynames")
force(babynames)
j <- babynames %>% filter(name == David)
j <- babynames %>% filter(name == "David")
View(j)
j <- babynames %>% filter(name == "David")
View(j)
library(shiny)
install.packages("shiny")
library(shiny)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(ggplot2)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(babynames)
subset(babynames, name == "David")
ui <- fluidPage(
titlePanel("Baby Name Explorer"),
sidebarLayout(
sidebarPanel(textInput('name', 'Enter Name')),
mainPanel(plotOutput('trend'))
)
)
server <- function(input, output, session) {
output$trend <- renderPlot({
# CODE BELOW: Update to display a line plot of the input name
data_name <- subset(babynames, name == input$name)
ggplot(data_name, aes(year, prop, color = sex)) + geom_line()
})
}
shinyApp(ui = ui, server = server)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/github/r-shiny-Babynames-Explorer/baby_names.R')
output$trend <- renderPlot({
data_name <- subset(babynames, name == input$name)
ggplot(data_name, aes(year, prop, color = sex)) + geom_line()
})
runApp('Documents/github/r-shiny-Babynames-Explorer/baby_names.R')
library(shiny); runApp('Documents/github/r-shiny-Babynames-Explorer/baby_names.R')
install.packages("plotly")
library(shiny)
library(ggplot2)
library(dplyr)
library(babynames)
library(plotly)
install.packages("plotly")
library(plotly)
install.packages("plotly")
library(plotly)
install.packages("DT")
library(DT)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel(plotlyOutput('plot_names')),
tabPanel(DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot, aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel(plotlyOutput('plot_names')),
tabPanel(DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot, aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel(plotlyOutput('plot_names')),
tabPanel(DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp('Documents/github/r-Shiny-Babynames-Explorer-Interactive-plot/babynames_plotly.R')
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
install.packages("shinythemes")
library(shinythemes)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
theme = shinythemes::shinytheme('flatly'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
theme = shinythemes::shinytheme('superhero'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
theme = shinythemes::selecttheme(),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
shinythemes::selecttheme(),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
shinythemes::themeSelector(),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
theme <- shinythemes::shinytheme('paper'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel('Baby Names Explorer'),
theme = shinythemes::shinytheme('paper'),
sidebarLayout(
sidebarPanel(
textInput('name', 'Enter Name')
),
mainPanel(
tabsetPanel(
tabPanel('Plot', plotlyOutput('plot_names')),
tabPanel('Table', DTOutput('table_names'))
)
)
)
)
server <- function(input, output, session) {
plot <- function() {
babynames %>% filter(name == input$name)
}
output$plot_names <- renderPlotly({
ggplot(plot(), aes(year, prop, color = sex)) +geom_col()
})
output$table_names <- renderDT({
plot()
})
}
shinyApp(ui = ui, server = server)
setwd("/Users/oubielamir")
setwd("/Users/oubielamir/Documents")
setwd("/Users/oubielamir/Documents/github/Covid19-US-Leaflet")
library(shiny)
library(leaflet)
library(leaflet.providers)
library(readr)
library(dplyr)
covid <- read_csv("06-07-2020.csv")
covid <- covid %>% rename(lng  = Long_, lat = Lat) %>% mutate(severe = ifelse(covid$Confirmed >= 100000, TRUE, FALSE),
circlesize = ifelse(covid$Confirmed <= 10000, 10,
ifelse(covid$Confirmed <= 30000, 15,
ifelse(covid$Confirmed <= 50000, 20,30
))))
pal <- colorFactor(c("blue", "red"), covid$severe)
ui <- bootstrapPage(
#map layout
leafletOutput('map', width = "200%", height = 1000) ,
#adding a slider input for users to view number of cases
absolutePanel(top =10, right = 30, id = 'controls',
sliderInput('cases', 'Number of cases', 1, 500000, 5000)
)
)
server <- function(input, output, session){
output$map <-  renderLeaflet({
#taking input from user
covid %>% filter(Confirmed <= input$cases) %>%
#adding tiles
leaflet() %>% addProviderTiles(providers$Stamen.Toner) %>%
#set view for the US and circle markers
setView(-95.7129, 37.0902, zoom = 4) %>% addCircleMarkers( weight = ~(Deaths/1000),
popup = ~paste(Province_State, '\n', (as.character(Confirmed)), 'cases, ',
as.character(Deaths), 'deaths'), color = ~pal(severe),
radius = ~circlesize
)
})
}
shinyApp(ui, server)
View(covid)
View(covid)
View(covid)
View(covid)
